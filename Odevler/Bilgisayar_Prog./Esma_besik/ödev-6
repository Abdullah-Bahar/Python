{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_BUmDSTN3p3O",
        "outputId": "44e161c6-824b-41ed-b669-21b4d50127e6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tablonun oluşturulmuş hali:[[0, 3, 0], [0, 0, 1]]\n",
            "Satır Toplamları: [3, 1]\n",
            "Sütun Toplamları: [0, 3, 1]\n"
          ]
        }
      ],
      "source": [
        "# soru 1\n",
        "print_table = []\n",
        "print_table.append([0, 3, 0])\n",
        "print_table.append([0, 0, 1])\n",
        "\n",
        "def sum_rows_and_columns(table):\n",
        "    num_rows = len(table)\n",
        "    num_cols = len(table[0]) if table else 0\n",
        "\n",
        "    sum_rows = [sum(row) for row in table]\n",
        "\n",
        "\n",
        "    sum_cols = [sum(table[i][j] for i in range(num_rows)) for j in range(num_cols)]\n",
        "\n",
        "    return sum_rows, sum_cols\n",
        "\n",
        "\n",
        "sum_rows, sum_cols = sum_rows_and_columns(print_table)\n",
        "\n",
        "print(\"Tablonun oluşturulmuş hali:\"+str(print_table))\n",
        "print(\"Satır Toplamları:\", sum_rows)\n",
        "print(\"Sütun Toplamları:\", sum_cols)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# soru 2\n",
        "def yildiza_cevir(kelime_tablosu, sonuc_tablosu):\n",
        "    sonuc_tablosu = []\n",
        "\n",
        "    for row in kelime_tablosu:\n",
        "        new_row = []\n",
        "        for word in row:\n",
        "            if word == secilen_kelime:\n",
        "                new_row.append('*' * len(word))\n",
        "            else:\n",
        "                new_row.append(word)\n",
        "        sonuc_tablosu.append(new_row)\n",
        "\n",
        "    return sonuc_tablosu\n",
        "\n",
        "kelime_tablosu = [['Elma', 'Armut', 'Kiraz', 'Mandalina']]\n",
        "secilen_kelime = 'Elma'\n",
        "sonuc_tablosu = yildiza_cevir(kelime_tablosu, secilen_kelime)\n",
        "for row in sonuc_tablosu:\n",
        "    print(row)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U21uYw6-6OVH",
        "outputId": "0d03e0c6-eb33-47f0-9613-98a0e8aa17fa"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['****', 'Armut', 'Kiraz', 'Mandalina']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# soru 3\n",
        "def main():\n",
        "\n",
        "    user_values = []\n",
        "    while True:\n",
        "        value = int(input(\"Değer girin (-1'i değerini girerseniz programı sonlandırır): \"))\n",
        "        if value == -1:\n",
        "            break\n",
        "        user_values.append(value)\n",
        "\n",
        "    print(\"Girilen Değerler:\", user_values)\n",
        "\n",
        "    limit = int(input(\"Limiti girin: \"))\n",
        "\n",
        "    index_to_remove = None\n",
        "    for i, value in enumerate(user_values):\n",
        "        if value > limit:\n",
        "            index_to_remove = i\n",
        "            break"
      ],
      "metadata": {
        "id": "cqU1BWcMBWUu"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# soru 4\n",
        "kelimeler = []\n",
        "for i in range(5):\n",
        "    kelime = input(f\"{i+1}. kelimeyi girin: \")\n",
        "    kelimeler.append(kelime)\n",
        "print(\"Oluşturulan Liste:\", kelimeler)\n",
        "print(\"Büyük Harfle Başlayan Dizeler:\")\n",
        "for büyük_harf in reversed(kelimeler):\n",
        "    if büyük_harf[0].isupper():\n",
        "        print(büyük_harf)\n",
        "kısa_kelime = min(kelimeler, key=len)\n",
        "print(\"En Kısa Kelime:\", kısa_kelime)"
      ],
      "metadata": {
        "id": "Mh63-BfNBW2N",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e232c8aa-b32f-4d40-f0cb-97b93e6f99a4"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1. kelimeyi girin: Kelime\n",
            "2. kelimeyi girin: Anne\n",
            "3. kelimeyi girin: Gül\n",
            "4. kelimeyi girin: kuzu\n",
            "5. kelimeyi girin: baba\n",
            "Oluşturulan Liste: ['Kelime', 'Anne', 'Gül', 'kuzu', 'baba']\n",
            "Büyük Harfle Başlayan Dizeler:\n",
            "Gül\n",
            "Anne\n",
            "Kelime\n",
            "En Kısa Kelime: Gül\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# soru 5\n",
        "def tuple_kesisimi(tuple1, tuple2):\n",
        "    set1 = set(tuple1)\n",
        "    set2 = set(tuple2)\n",
        "\n",
        "    intersection = set1.intersection(set2)\n",
        "\n",
        "    return tuple(intersection)\n",
        "tuple1 = (8, 2, 3, 4)\n",
        "tuple2 = (3, 4, 5, 8)\n",
        "\n",
        "result = tuple_kesisimi(tuple1, tuple2)\n",
        "print(\"Kesişim:\", result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rKq446AmBXiV",
        "outputId": "7a4e2ac0-7110-4374-bbd1-4a6917239928"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Kesişim: (8, 3, 4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# soru 6"
      ],
      "metadata": {
        "id": "AKDhRSi4tJG0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
