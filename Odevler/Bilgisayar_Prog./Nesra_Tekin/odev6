{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6Ho40R5QYTaL",
        "outputId": "ca293d69-fae0-4fdf-f30e-fb1da1d04ef4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Değer gir: 10\n",
            "Değer gir: 20\n",
            "Değer gir: 30\n",
            "Değer gir: 40\n",
            "Değer gir: 50\n",
            "Değer gir: 60\n",
            "Secimini yaz(print_table, sum_rows, sum_cols)print_table\n",
            "10 20 30\n",
            "40 50 60\n"
          ]
        }
      ],
      "source": [
        "table=[]\n",
        "for i in range(2):\n",
        "  row=[]\n",
        "  for a in range(3):\n",
        "    row.append(int(input('Değer gir: ')))\n",
        "  table.append(row)\n",
        "def print_table():\n",
        "  for row in table:\n",
        "    print(' '.join(str(x) for x in row))\n",
        "def sum_rows():\n",
        "  for row in table:\n",
        "    print(sum(row))\n",
        "def sum_cols():\n",
        "  for b in range(3):\n",
        "    col_sum=0\n",
        "    for row in table:\n",
        "      col_sum+=row[b]\n",
        "    print(col_sum)\n",
        "\n",
        "secim=input('Secimini yaz(print_table, sum_rows, sum_cols)')\n",
        "\n",
        "if secim ==\"print_table\":\n",
        "  print_table()\n",
        "elif secim==\"sum_rows\":\n",
        "  sum_rows()\n",
        "elif secim==\"sum_cols\":\n",
        "  sum_cols()\n",
        "else:\n",
        "  print(\"Geçersiz seçim.\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def kelimedegistirme(kelimetablosu,a):\n",
        "  for row in kelimetablosu:\n",
        "    if a in row:\n",
        "      row[row.index(a)]=\"*\"\n",
        "  return kelimetablosu"
      ],
      "metadata": {
        "id": "4nUa83f1ehkv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "numaralar=[]\n",
        "while True:\n",
        "  sayi=int(input(\"Sayı giriniz (Çıkmak için -1 girin!): \"))\n",
        "  if sayi==-1:\n",
        "    break\n",
        "  numaralar.append(sayi)\n",
        "limit=int(input(\"Limit gir: \"))\n",
        "\n",
        "for i in range(len(numaralar)):\n",
        "  if numaralar[i]>limit:\n",
        "    numaralar.remove(numaralar[i])\n",
        "    break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w5QF3Wk7f2V4",
        "outputId": "f7fcc73e-e841-45ee-9d27-36cd96cedb59"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sayı giriniz (Çıkmak için -1 girin!): 1\n",
            "Sayı giriniz (Çıkmak için -1 girin!): 2\n",
            "Sayı giriniz (Çıkmak için -1 girin!): 3\n",
            "Sayı giriniz (Çıkmak için -1 girin!): 4\n",
            "Sayı giriniz (Çıkmak için -1 girin!): 5\n",
            "Sayı giriniz (Çıkmak için -1 girin!): -1\n",
            "Limit gir: 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dizi=[]\n",
        "for i in range(5):\n",
        "  kelime=input(\"Kelimeyi girin: \")\n",
        "  dizi.append(kelime)\n",
        "for kelime in dizi[::-1]:\n",
        "  if kelime[0].isupper():\n",
        "    print(kelime)\n",
        "\n",
        "enkisakelime=min(dizi, key=len)\n",
        "print(enkisakelime)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4dwb9o9Kh9TB",
        "outputId": "2b6f5823-4c73-41ad-e198-f28e705ee403"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Kelimeyi girin: Nesra\n",
            "Kelimeyi girin: Tekin\n",
            "Kelimeyi girin: Batuhan\n",
            "Kelimeyi girin: başer\n",
            "Kelimeyi girin: ok\n",
            "Batuhan\n",
            "Tekin\n",
            "Nesra\n",
            "ok\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=('a',1,2,3)\n",
        "b=(2,3,4,'a','b')\n",
        "c=a+b\n",
        "print(c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_6ACFdnCjSB5",
        "outputId": "b8ed64c6-35d8-4f8e-8966-a5632e04afe7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('a', 1, 2, 3, 2, 3, 4, 'a', 'b')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t1 = ('a',5)\n",
        "t2 = (7,)\n",
        "t1=t1+t2\n",
        "print(t1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aXVKIqcylZiR",
        "outputId": "56dd5356-ed42-475d-aa49-ad6a141203be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('a', 5, 7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def gcd(n1, n2):\n",
        "  if n1 == 0:\n",
        "    return n2\n",
        "  return gcd(n2 % n1, n1)\n",
        "\n",
        "def lcm(n1, n2):\n",
        "  return (n1 * n2) // gcd(n1, n2)"
      ],
      "metadata": {
        "id": "qNa_cNRhj9-T"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
